# -------------------------------
# 1. Set MySQL root password locally (Debian only)
# -------------------------------
- name: Set MySQL root password (Debian only)
  hosts: localhost
  become: yes
  vars:
    mysql_root_password: Thanigai@01

  tasks:
    - name: Ensure MySQL is installed
      apt:
        name: mysql-server
        state: present
        update_cache: yes

    - name: Set MySQL root password (Debian only)
      mysql_user:
        name: root
        host: localhost
        password: "{{ mysql_root_password }}"
        state: present
        login_user: root
        login_password: "{{ mysql_root_password }}"
      become: yes

# -------------------------------
# 2. Provision app server
# -------------------------------
- hosts: app
  become: yes
  gather_facts: yes
  vars:
    ansible_python_interpreter: /usr/bin/python3
    mysql_root_password: "Thanigai@01"
    app_db_name: "world"
    app_db_user: "admin_user"
    app_db_password: "Thani@01"
    spring_boot_jar: "files/privilege-0.0.1-SNAPSHOT.jar"
    spring_boot_dest: "/home/{{ ansible_user }}/privilege.jar"

  tasks:
    - name: Install pip and MySQL Python packages (Debian)
      apt:
        name:
          - python3-pip
          - python3-mysqldb
        state: present
      when: ansible_facts.pkg_mgr == "apt"

    - name: Install pip (Amazon Linux)
      yum:
        name: python3-pip
        state: present
      when: ansible_facts.pkg_mgr == "yum"

    - name: Install PyMySQL via pip
      pip:
        name: PyMySQL
        executable: pip3

    - name: Install Java (Debian)
      apt:
        name: openjdk-11-jdk
        state: present
      when: ansible_facts.pkg_mgr == "apt"

    - name: Install Java (Amazon Linux)
      yum:
        name: java-21-amazon-corretto
        state: present
      when: ansible_facts.pkg_mgr == "yum"

    - name: Install MySQL/MariaDB (Debian)
      apt:
        name: mysql-server
        state: present
      when: ansible_facts.pkg_mgr == "apt"

    - name: Install MariaDB (Amazon Linux)
      yum:
        name: mariadb-server
        state: present
      when: ansible_facts.pkg_mgr == "yum"

    - name: Start MySQL/MariaDB service
      service:
        name: "{{ 'mysql' if ansible_facts.pkg_mgr == 'apt' else 'mariadb' }}"
        state: started
        enabled: true

    - name: Set MySQL root password (Debian only)
      mysql_user:
        name: root
        password: "{{ mysql_root_password }}"
        login_unix_socket: /var/run/mysqld/mysqld.sock
        check_implicit_admin: yes
        update_password: always
      when: ansible_facts.pkg_mgr == "apt"

    - name: Set MySQL root password (Amazon Linux)
      mysql_user:
        name: root
        password: "{{ mysql_root_password }}"
        host: localhost
        login_user: root
        login_password: ""
        check_implicit_admin: yes
        update_password: on_create
      when: ansible_facts.pkg_mgr == "yum"

    - name: Create app database
      mysql_db:
        name: "{{ app_db_name }}"
        state: present
        login_user: root
        login_password: "{{ mysql_root_password }}"

    - name: Create app DB user
      mysql_user:
        name: "{{ app_db_user }}"
        password: "{{ app_db_password }}"
        priv: "{{ app_db_name }}.*:ALL"
        host: "%"
        state: present
        login_user: root
        login_password: "{{ mysql_root_password }}"

    - name: Enable Nginx repo (Amazon Linux)
      shell: amazon-linux-extras enable nginx1
      when: ansible_facts.pkg_mgr == "yum"

    - name: Install Nginx (Debian)
      apt:
        name: nginx
        state: present
      when: ansible_facts.pkg_mgr == "apt"

    - name: Install Nginx (Amazon Linux)
      yum:
        name: nginx
        state: present
      when: ansible_facts.pkg_mgr == "yum"

    - name: Start Nginx
      service:
        name: nginx
        state: started
        enabled: true

    - name: Copy Spring Boot JAR
      copy:
        src: "{{ spring_boot_jar }}"
        dest: "{{ spring_boot_dest }}"
        mode: '0755'

    - name: Run Spring Boot App
      shell: "nohup java -jar {{ spring_boot_dest }} > /home/{{ ansible_user }}/app.log 2>&1 &"
      args:
        chdir: "/home/{{ ansible_user }}/"

    - name: Configure Nginx reverse proxy
      copy:
        dest: /etc/nginx/conf.d/springboot.conf
        content: |
          server {
              listen 80;
              location / {
                  proxy_pass http://localhost:8095;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
              }
          }

    - name: Restart Nginx
      service:
        name: nginx
        state: restarted

